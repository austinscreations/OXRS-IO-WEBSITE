import{d as r,o as n,c as l,a as e,e as t,h as i,F as d,f as c,g as o}from"./app.b38cdf7f.js";import{_ as h}from"./plugin-vue_export-helper.21dcd24c.js";var _="/images/OXRS-SW-Structure.jpg";const u={},p=c('<h1 id="libraries" tabindex="-1"><a class="header-anchor" href="#libraries" aria-hidden="true">#</a> Libraries</h1><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>Several libraries have been created to support the OXRS eco-system with the goal to minimise the effort in writing new firmware for OXRS compatible hardware.</p><p>The diagram below shows how the libraries relate to each other;</p><p><img src="'+_+'" alt="OXRS Libraries"></p>',5),f={id:"oxrs-sha-rack32-esp32-lib",tabindex:"-1"},b=e("a",{class:"header-anchor",href:"#oxrs-sha-rack32-esp32-lib","aria-hidden":"true"},"#",-1),m=o(),S={href:"https://github.com/SuperHouse/OXRS-SHA-Rack32-ESP32-LIB",target:"_blank",rel:"noopener noreferrer"},x=o("OXRS-SHA-RACK32-ESP32-LIB"),O=o("Helper library for firmware designed to run on the "),w=o("Rack32"),I=o(" controller"),R=e("li",null,"Handles initialisation and polling for ethernet, MQTT, API and LCD libraries",-1),g={id:"oxrs-io-iohandler-esp32-lib",tabindex:"-1"},k=e("a",{class:"header-anchor",href:"#oxrs-io-iohandler-esp32-lib","aria-hidden":"true"},"#",-1),y=o(),L=o("OXRS-IO-IOHandler-ESP32-LIB"),P=e("ul",null,[e("li",null,"Decodes inputs from various devices like switches, buttons, rotary encoders and more"),e("li",null,"Keeps track of output state and handles interlocking and timers"),e("li",null,"Typically used with MCP23017 I/O expanders")],-1),A={id:"oxrs-io-api-esp32-lib",tabindex:"-1"},E=e("a",{class:"header-anchor",href:"#oxrs-io-api-esp32-lib","aria-hidden":"true"},"#",-1),X=o(),v=o("OXRS-IO-API-ESP32-LIB"),T=e("ul",null,[e("li",null,"REST API for device configuration"),e("li",null,"OTA upload of firmware updates")],-1),B={id:"oxrs-io-mqtt-esp32-lib",tabindex:"-1"},C=e("a",{class:"header-anchor",href:"#oxrs-io-mqtt-esp32-lib","aria-hidden":"true"},"#",-1),N=o(),q=o("OXRS-IO-MQTT-ESP32-LIB"),H=e("ul",null,[e("li",null,"Maintains MQTT connection"),e("li",null,"Decodes JSON config & command payloads and passes them to your firmware for handling"),e("li",null,"Provides a simple API for publishing JSON status and telemetry data")],-1),D={id:"oxrs-io-lcd-esp32-lib",tabindex:"-1"},M=e("a",{class:"header-anchor",href:"#oxrs-io-lcd-esp32-lib","aria-hidden":"true"},"#",-1),V=o(),Q=o("OXRS-IO-LCD-ESP32-LIB"),j=e("ul",null,[e("li",null,"Common status display for OXRS compatible controller with a LCD"),e("li",null,"Animated display of the I/O port status")],-1),F={id:"oxrs-ac-sensors-esp-lib",tabindex:"-1"},J=e("a",{class:"header-anchor",href:"#oxrs-ac-sensors-esp-lib","aria-hidden":"true"},"#",-1),K=o(),W=o("OXRS-AC-SENSORS-ESP-LIB"),z=e("ul",null,[e("li",null,"Allows quick easy code intergration for devices with qwiic jst connection support"),e("li",null,"Allows the use of 5 different qwiic devices")],-1);function G(U,Y){const a=r("ExternalLinkIcon"),s=r("RouterLink");return n(),l(d,null,[p,e("h3",f,[b,m,e("a",S,[x,t(a)])]),e("ul",null,[e("li",null,[O,t(s,{to:"/docs/hardware/controllers/rack32.html"},{default:i(()=>[w]),_:1}),I]),R]),e("h3",g,[k,y,t(s,{to:"/docs/libraries/esp32-io-handler-library.html"},{default:i(()=>[L]),_:1})]),P,e("h3",A,[E,X,t(s,{to:"/docs/libraries/esp32-api-library.html"},{default:i(()=>[v]),_:1})]),T,e("h3",B,[C,N,t(s,{to:"/docs/libraries/esp32-mqtt-library.html"},{default:i(()=>[q]),_:1})]),H,e("h3",D,[M,V,t(s,{to:"/docs/libraries/esp32-lcd-library.html"},{default:i(()=>[Q]),_:1})]),j,e("h3",F,[J,K,t(s,{to:"/docs/libraries/esp-sensor-library.html"},{default:i(()=>[W]),_:1})]),z],64)}var ee=h(u,[["render",G]]);export{ee as default};
